# Generated by Django 3.1.7 on 2021-06-03 11:05

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []  # type: ignore

    operations = [
        migrations.CreateModel(
            name="AccountProviders",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("account_id", models.IntegerField(blank=True, null=True)),
                (
                    "provider_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "provider_value",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("provider_key", models.TextField(blank=True, null=True)),
                ("reset_key", models.CharField(blank=True, max_length=255, null=True)),
                ("reset_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Account Provider",
                "verbose_name_plural": "Account Providers",
                "db_table": "account_providers",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Accounts",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("gender", models.CharField(blank=True, max_length=255, null=True)),
                ("email", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                (
                    "account_token",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "photo_file_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "photo_content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("photo_file_size", models.IntegerField(blank=True, null=True)),
                ("photo_updated_at", models.DateTimeField(blank=True, null=True)),
                ("locale", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "api_version",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("os", models.CharField(blank=True, max_length=255, null=True)),
                ("unsubscribed", models.IntegerField(blank=True, null=True)),
                (
                    "unsubscribe_key",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("using_geolocation", models.IntegerField(blank=True, null=True)),
                ("last_longitude", models.FloatField(blank=True, null=True)),
                ("last_latitude", models.FloatField(blank=True, null=True)),
                ("app_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "app_platform",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("banned", models.IntegerField(blank=True, null=True)),
                ("last_email_sent", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Account",
                "verbose_name_plural": "Accounts",
                "db_table": "accounts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ArInternalMetadata",
            fields=[
                (
                    "key",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("value", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Ar Internal Metadata",
                "verbose_name_plural": "Ar Internat Metadata",
                "db_table": "ar_internal_metadata",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Joyns",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("product_id", models.CharField(blank=True, max_length=255, null=True)),
                ("product_name", models.TextField(blank=True, null=True)),
                ("custom1", models.TextField(blank=True, null=True)),
                ("custom2", models.TextField(blank=True, null=True)),
                ("custom3", models.TextField(blank=True, null=True)),
                ("product_short_description", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("price", models.FloatField(blank=True, null=True)),
                ("product_type", models.TextField(blank=True, null=True)),
                ("specifications", models.TextField(blank=True, null=True)),
                ("primary_artist", models.TextField(blank=True, null=True)),
                ("custom4", models.TextField(blank=True, null=True)),
                ("keywords", models.TextField(blank=True, null=True)),
                ("language", models.TextField(blank=True, null=True)),
                ("custom5", models.TextField(blank=True, null=True)),
                ("custom6", models.TextField(blank=True, null=True)),
                ("merchant_category", models.TextField(blank=True, null=True)),
                ("image_url", models.TextField(blank=True, null=True)),
                ("merchant_thumb", models.TextField(blank=True, null=True)),
                ("deep_link", models.TextField(blank=True, null=True)),
                ("stock_status", models.TextField(blank=True, null=True)),
                ("valid_from", models.DateTimeField(blank=True, null=True)),
                ("valid_to", models.DateTimeField(blank=True, null=True)),
                ("contract_type", models.TextField(blank=True, null=True)),
                ("delivery_restrictions", models.TextField(blank=True, null=True)),
                ("custom7", models.TextField(blank=True, null=True)),
                ("custom8", models.IntegerField(blank=True, null=True)),
                ("dimensions", models.TextField(blank=True, null=True)),
                ("custom9", models.TextField(blank=True, null=True)),
                ("time", models.IntegerField(blank=True, null=True)),
                ("parent_product_id", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Joyn",
                "verbose_name_plural": "Joyns",
                "db_table": "joyns",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Keywords",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("tmdb_id", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Keyword",
                "verbose_name_plural": "Keywords",
                "db_table": "keywords",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="KeywordsMovies",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("keyword_id", models.IntegerField(blank=True, null=True)),
                ("movie_id", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Keywords Movie",
                "verbose_name_plural": "Keywords Movies",
                "db_table": "keywords_movies",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Logs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("account_id", models.IntegerField(blank=True, null=True)),
                ("event_name", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("user_id", models.IntegerField(blank=True, null=True)),
                ("event_description", models.TextField(blank=True, null=True)),
                ("event_key", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "event_value",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("cinema_id", models.IntegerField(blank=True, null=True)),
                ("chain_id", models.IntegerField(blank=True, null=True)),
                ("info_id", models.IntegerField(blank=True, null=True)),
                ("movie_id", models.IntegerField(blank=True, null=True)),
                ("tv_show_translation_id", models.IntegerField(blank=True, null=True)),
                ("push_notification_id", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Log",
                "verbose_name_plural": "Logs",
                "db_table": "logs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="NotificationLogs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notification_id", models.IntegerField(blank=True, null=True)),
                ("user_id", models.IntegerField(blank=True, null=True)),
                ("account_id", models.IntegerField(blank=True, null=True)),
                ("count", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("last_view_at", models.DateTimeField(blank=True, null=True)),
                (
                    "last_user_action",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("impressions", models.IntegerField(blank=True, null=True)),
                ("clicks", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Notification Log",
                "verbose_name_plural": "Notification Logs",
                "db_table": "notification_logs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Notifications",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "action_value",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("locale", models.CharField(blank=True, max_length=255, null=True)),
                ("language", models.CharField(blank=True, max_length=255, null=True)),
                ("users_type", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "condition_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "condition_value",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                (
                    "photo_file_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "photo_content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("photo_file_size", models.IntegerField(blank=True, null=True)),
                ("photo_updated_at", models.DateTimeField(blank=True, null=True)),
                (
                    "repeat_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("repeat_value", models.IntegerField(blank=True, null=True)),
                (
                    "notification_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "status_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("radius", models.FloatField(blank=True, null=True)),
                (
                    "ad_56_portrait_file_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ad_56_portrait_content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ad_56_portrait_file_size",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "ad_56_portrait_updated_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "ad_75_portrait_file_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ad_75_portrait_content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ad_75_portrait_file_size",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "ad_75_portrait_updated_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "ad_75_landscape_file_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ad_75_landscape_content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ad_75_landscape_file_size",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "ad_75_landscape_updated_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("max_impressions", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "db_table": "notifications",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PassbookRegistrations",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.CharField(blank=True, max_length=255, null=True)),
                ("device_id", models.CharField(blank=True, max_length=255, null=True)),
                ("push_token", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "serial_number",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "pass_type_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Passbook Registration",
                "verbose_name_plural": "Passbook Registrations",
                "db_table": "passbook_registrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Passes",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serial_number",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "authentication_token",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("ticket_id", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Pass",
                "verbose_name_plural": "Passes",
                "db_table": "passes",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PushNotifications",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "push_platform",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("push_type", models.CharField(blank=True, max_length=255, null=True)),
                ("info_ids", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "tv_show_translation_ids",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("badge", models.IntegerField(blank=True, null=True)),
                ("push_at", models.DateTimeField(blank=True, null=True)),
                ("user_ids", models.TextField(blank=True, null=True)),
                ("prepared_ids", models.TextField(blank=True, null=True)),
                ("sent_ids", models.TextField(blank=True, null=True)),
                ("open_ids", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("permanent", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Push Notification",
                "verbose_name_plural": "Push Notifications",
                "db_table": "push_notifications",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="QrCodes",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                (
                    "image_file_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "image_content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("image_file_size", models.IntegerField(blank=True, null=True)),
                ("image_updated_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "QR Code",
                "verbose_name_plural": "QR Codes",
                "db_table": "qr_codes",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Reminders",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.IntegerField(blank=True, null=True)),
                ("account_id", models.IntegerField(blank=True, null=True)),
                ("info_id", models.IntegerField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("pushed", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                (
                    "app_platform",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("app_name", models.CharField(blank=True, max_length=255, null=True)),
                ("push_token", models.TextField(blank=True, null=True)),
                (
                    "reminder_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("push_later", models.IntegerField(blank=True, null=True)),
                ("locale", models.CharField(blank=True, max_length=255, null=True)),
                ("text", models.CharField(blank=True, max_length=255, null=True)),
                ("did_open", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Reminder",
                "verbose_name_plural": "Reminders",
                "db_table": "reminders",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ScreenLogs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cinema_id", models.IntegerField(blank=True, null=True)),
                ("screen_id", models.IntegerField(blank=True, null=True)),
                ("info_id", models.IntegerField(blank=True, null=True)),
                ("showtime_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("occupied_seat_ids", models.TextField(blank=True, null=True)),
                ("user_id", models.IntegerField(blank=True, null=True)),
                ("account_id", models.IntegerField(blank=True, null=True)),
                ("chain_id", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Screen Log",
                "verbose_name_plural": "Screen Logs",
                "db_table": "screen_logs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Screens",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cinema_id", models.IntegerField(blank=True, null=True)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("width", models.IntegerField(blank=True, null=True)),
                ("height", models.IntegerField(blank=True, null=True)),
                (
                    "cinema_screen_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("row_order", models.IntegerField(blank=True, null=True)),
                ("column_order", models.IntegerField(blank=True, null=True)),
                ("row_naming", models.IntegerField(blank=True, null=True)),
                ("column_naming", models.IntegerField(blank=True, null=True)),
                ("id_row_order", models.IntegerField(blank=True, null=True)),
                ("id_column_order", models.IntegerField(blank=True, null=True)),
                ("id_row_naming", models.IntegerField(blank=True, null=True)),
                ("id_column_naming", models.IntegerField(blank=True, null=True)),
                (
                    "seating_option_allow_single_space",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "seating_option_can_split_double_seats",
                    models.IntegerField(blank=True, null=True),
                ),
                ("json_field", models.TextField(blank=True, null=True)),
                ("row_names_overwrite", models.TextField(blank=True, null=True)),
                ("column_names_overwrite", models.TextField(blank=True, null=True)),
                ("row_ids_overwrite", models.TextField(blank=True, null=True)),
                ("column_ids_overwrite", models.TextField(blank=True, null=True)),
                (
                    "video_system",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("capacity", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "photo_file_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "photo_content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("photo_file_size", models.IntegerField(blank=True, null=True)),
                ("photo_updated_at", models.DateTimeField(blank=True, null=True)),
                (
                    "audio_system",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "display_size",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "default_area_code",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("parser_data", models.TextField(blank=True, null=True)),
                (
                    "parser_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "seating_option_allow_single_space_to_loveseat",
                    models.IntegerField(blank=True, null=True),
                ),
                ("auto_count_on_edit", models.IntegerField(blank=True, null=True)),
                ("parsing_options", models.TextField(blank=True, null=True)),
                ("free_seating", models.IntegerField(blank=True, null=True)),
                (
                    "seating_option_prefer_empty_at_row_end_or_left",
                    models.IntegerField(blank=True, null=True),
                ),
            ],
            options={
                "verbose_name": "Screen",
                "verbose_name_plural": "Screens",
                "db_table": "screens",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Seats",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("draw_x", models.IntegerField(blank=True, null=True)),
                ("draw_y", models.IntegerField(blank=True, null=True)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("screen_id", models.IntegerField(blank=True, null=True)),
                ("row", models.CharField(blank=True, max_length=255, null=True)),
                ("column", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "cinema_seat_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("seat_type", models.IntegerField(blank=True, null=True)),
                ("draw_type", models.IntegerField(blank=True, null=True)),
                ("skip_id", models.IntegerField(blank=True, null=True)),
                ("skip_name", models.IntegerField(blank=True, null=True)),
                ("cant_select", models.IntegerField(blank=True, null=True)),
                ("save_for_undo", models.IntegerField(blank=True, null=True)),
                ("area_code", models.CharField(blank=True, max_length=255, null=True)),
                ("area_type", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Seat",
                "verbose_name_plural": "Seats",
                "db_table": "seats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SettingGroups",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "setting_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "setting_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Setting Group",
                "verbose_name_plural": "Setting Groups",
                "db_table": "setting_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Settings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("setting_group_id", models.IntegerField(blank=True, null=True)),
                ("key", models.CharField(blank=True, max_length=255, null=True)),
                ("value", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Setting",
                "verbose_name_plural": "Settings",
                "db_table": "settings",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Tickets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("account_id", models.IntegerField(blank=True, null=True)),
                ("info_id", models.IntegerField(blank=True, null=True)),
                (
                    "movie_title",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("cinema_id", models.IntegerField(blank=True, null=True)),
                (
                    "cinema_screen_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "reservation_code",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "selected_seats",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("price", models.CharField(blank=True, max_length=255, null=True)),
                ("holder", models.CharField(blank=True, max_length=255, null=True)),
                ("email", models.CharField(blank=True, max_length=255, null=True)),
                ("note", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "selected_seat_ids",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "showtime_value",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("screen_id", models.IntegerField(blank=True, null=True)),
                ("number_of_seats", models.IntegerField(blank=True, null=True)),
                ("movie_id", models.IntegerField(blank=True, null=True)),
                (
                    "ticket_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "booking_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "payment_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "convenience_fee",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("account_connection_id", models.IntegerField(blank=True, null=True)),
                ("user_id", models.IntegerField(blank=True, null=True)),
                ("chain_id", models.IntegerField(blank=True, null=True)),
                ("qr_code_id", models.IntegerField(blank=True, null=True)),
                ("hash_id", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "Ticket",
                "verbose_name_plural": "Tickets",
                "db_table": "tickets",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Users",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "access_token",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("locale", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "api_version",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("os", models.CharField(blank=True, max_length=255, null=True)),
                ("account_id", models.IntegerField(blank=True, null=True)),
                ("os_version", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "app_version",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("using_geolocation", models.IntegerField(blank=True, null=True)),
                ("push_token", models.TextField(blank=True, null=True)),
                (
                    "push_device",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("push_last_date", models.DateTimeField(blank=True, null=True)),
                ("ip_address", models.TextField(blank=True, null=True)),
                ("app_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "app_platform",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("banned", models.IntegerField(blank=True, null=True)),
                ("last_latitude", models.FloatField(blank=True, null=True)),
                ("last_longitude", models.FloatField(blank=True, null=True)),
                ("last_email_sent_on", models.DateTimeField(blank=True, null=True)),
                (
                    "last_services",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("tester", models.IntegerField(blank=True, null=True)),
                (
                    "phone_version",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("was_signed_in", models.IntegerField(blank=True, null=True)),
                ("kinode_favorites", models.TextField(blank=True, null=True)),
                ("developer", models.IntegerField(blank=True, null=True)),
                ("supporter", models.IntegerField(blank=True, null=True)),
                (
                    "aws_sns_endpoint_arn",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "sandbox_token",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Watchlists",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("movie_id", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("user_id", models.IntegerField(blank=True, null=True)),
                ("account_id", models.IntegerField(blank=True, null=True)),
                ("locale", models.CharField(blank=True, max_length=255, null=True)),
                ("info_id", models.IntegerField(blank=True, null=True)),
                ("tv_show_translation_id", models.IntegerField(blank=True, null=True)),
                ("stars", models.FloatField(blank=True, null=True)),
                ("review", models.TextField(blank=True, null=True)),
                ("active", models.IntegerField(blank=True, null=True)),
                ("trailer_watched_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Watchlist",
                "verbose_name_plural": "Watchlists",
                "db_table": "watchlists",
                "managed": False,
            },
        ),
    ]
